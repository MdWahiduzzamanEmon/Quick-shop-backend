// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GENERAL_USER
  RETAILER
  SUPPLIER
}

enum WorkerRole {
  RAIDER
  OPERATOR
  REPRESENTATIVE
}

enum User_status {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

// Main shop model: all models will be connected with this model

enum ShopStatus {
  ACTIVE
  INACTIVE
}

// Vendor Model: Represents a shop owner or person responsible for a shop
model Vendor {
  id         String             @id @default(cuid())
  name       String             @unique
  address    String
  phone      String?            @unique
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  isActive   ShopStatus         @default(ACTIVE)
  users      User[] // A vendor can have multiple users
  products   product[] // A vendor can have multiple products
  categories product_category[] // A vendor can have multiple product categories

  @@index([id, isActive, name])
  @@map("vendor")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  mobile         String           @unique
  username       String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  otherUsers     otherUsers? // Only for general user and retailer
  worker         worker? // Only for operator, raider, representative
  loggin_history loggin_history[] // User's login history
  admin          admin? // User can be an admin
  vendor         Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId       String // Foreign key to `Vendor`

  @@unique([email, mobile, username]) // Unique constraint: the combination of email, mobile, and username must be unique
  @@index([id, email, mobile, username])
  @@map("user")
}

// Model for admin
model admin {
  id        String      @id @default(cuid())
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @unique
  fullName  String?
  role      String      @default("ADMIN")
  isActive  User_status @default(ACTIVE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([id, userId, role, isActive])
  @@map("admin")
}

// Model for general user and retailer
model otherUsers {
  id              String      @id @default(cuid())
  User            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String      @unique
  firstName       String?
  lastName        String?
  profile_picture Json        @default("{}")
  role            Role        @default(GENERAL_USER)
  isActive        User_status @default(ACTIVE)
  userUniqueId    String?     @unique @default(cuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  order           Int         @default(0) // For sorting purpose
  userJoinDate    DateTime    @default(now())

  @@index([id, userId, role, isActive, userUniqueId])
  @@map("otherUsers")
}

// Model for operator, raider, representative
model worker {
  id                  String      @id @default(cuid())
  fullName            String?
  role                WorkerRole  @default(OPERATOR)
  fatherName          String?
  employeeID          String?     @unique @default(cuid())
  whatsapp            String?     @unique
  NID                 String?     @unique
  NIDImage            Json        @default("{}")
  education           String?     @default("")
  bankName            String?     @default("")
  branchName          String?     @default("")
  accountNumber       String?     @default("")
  mobileBanking       String?     @default("")
  mobileBankingNumber String?     @default("")
  profile_picture     Json        @default("{}")
  address             String?     @default("")
  zipCode             String?     @default("")
  userJoinDate        DateTime    @default(now())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  isActive            User_status @default(ACTIVE)
  order               Int         @default(0) // For sorting purpose
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String      @unique

  @@index([id, userId, role, isActive, NID, employeeID, whatsapp])
  @@map("workers")
}

// Get log-in info
enum loggin_status {
  SUCCESS
  FAILED
}

model loggin_history {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String?
  device    String?
  browser   String?
  os        String?
  location  String?
  status    loggin_status
  note      String?
  loginAt   DateTime      @default(now())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId, status]) // Indexing for faster search
  @@map("logginInfo") // Table name
}

// MASTER MODULES STARTS HERE
enum product_status {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

// Product category
model product_category {
  id                    String         @id @default(cuid())
  product_category_name String
  description           String?
  image                 Json           @default("{}")
  isActive              product_status @default(PENDING)
  order                 Int            @default(0) // For sorting purpose
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  vendor                Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade) // Link to vendor
  vendorId              String
  product               product[]

  @@index([id, product_category_name, isActive])
  @@map("product_category")
}

// Product model
model product {
  id          String           @id @default(cuid())
  name        String
  description String?
  image       Json             @default("{}")
  price       Float
  stock       Int
  isActive    product_status   @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  vendor      Vendor           @relation(fields: [vendorId], references: [id], onDelete: Cascade) // Link to vendor
  vendorId    String
  category    product_category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String

  @@index([id, name, isActive])
  @@map("product")
}
