// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMINISTRATOR
  GENERAL_USER
  RETAILER
  SUPPLIER
  RAIDER
  OPERATOR
  REPRESENTATIVE
}

enum user_status {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

model User {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  administrator  administrator?
  otherUsers     otherUsers?
  loggin_history loggin_history?
}

model administrator {
  id        String      @id @default(cuid())
  User      User        @relation(fields: [userId], references: [id])
  userId    String      @unique
  email     String      @unique
  firstName String
  lastName  String
  username  String      @unique
  mobile    String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  role      Role        @default(ADMINISTRATOR)
  isActive  user_status @default(ACTIVE)

  loggin_history loggin_history[] //one user can have multiple loggin history

  @@index([userId, email, mobile, username])
  @@map("adminastators")
}

model otherUsers {
  id              String           @id @default(cuid())
  User            User             @relation(fields: [userId], references: [id])
  userId          String           @unique
  email           String           @unique
  firstName       String?
  lastName        String?
  username        String           @unique
  mobile          String           @unique
  profile_picture Json             @default("{}")
  password        String
  role            Role             @default(GENERAL_USER)
  isActive        user_status      @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  loggin_history  loggin_history[] //one user can have multiple loggin history

  @@index([userId, email, mobile, username])
  @@map("allUsers")
}

//get loggin info

enum loggin_status {
  SUCCESS
  FAILED
}

model loggin_history {
  id              String         @id @default(cuid())
  User            User           @relation(fields: [userId], references: [id])
  userId          String         @unique
  ipAddress       String?
  device          String?
  browser         String?
  os              String?
  location        String?
  status          loggin_status
  loginAt         DateTime       @default(now())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  otherUsers      otherUsers?    @relation(fields: [otherUsersId], references: [id], onDelete: SetNull)
  otherUsersId    String?
  administrator   administrator? @relation(fields: [administratorId], references: [id])
  administratorId String?

  @@index([userId, ipAddress, device, browser, os, location]) //indexing for faster search
  @@map("logginInfo") //table name
}
