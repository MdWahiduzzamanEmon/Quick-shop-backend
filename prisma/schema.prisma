// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GENERAL_USER
  RETAILER
}

enum WorkerRole {
  RAIDER
  OPERATOR
  REPRESENTATIVE
}

enum User_status {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

// Main shop model: all models will be connected with this model

enum ShopStatus {
  ACTIVE
  INACTIVE
}

// Model for admin

model superAdmin {
  id        String      @id @default(cuid())
  firstName String
  lastName  String
  email     String      @unique
  password  String
  mobile    String      @unique
  username  String      @unique
  role      String      @default("SUPER_ADMIN")
  isActive  User_status @default(ACTIVE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  vendor    Vendor[] // An admin can have multiple vendors

  @@index([id, role, isActive])
  @@map("superAdmin")
}

// Vendor Model: Represents a shop owner or person responsible for a shop
model Vendor {
  id           String             @id @default(cuid())
  name         String             @unique
  address      String
  phone        String?
  vendor_image Json?              @default("{}")
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  isActive     ShopStatus         @default(ACTIVE)
  users        User[] // A vendor can have multiple users
  products     product[] // A vendor can have multiple products
  categories   product_category[] // A vendor can have multiple product categories
  Zone         Zone[]
  superAdmin   superAdmin         @relation(fields: [superAdminId], references: [id], onDelete: Cascade)
  superAdminId String

  @@index([id, isActive, name])
  @@map("vendor")
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  mobile           String             @unique
  username         String             @unique
  password         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  otherUsers       otherUsers? // Only for general user and retailer
  worker           worker? // Only for operator, raider, representative
  Supplier         Supplier? // Only for supplier
  loggin_history   loggin_history[] // User's login history
  vendor           Vendor             @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId         String // Foreign key to `Vendor`
  product          product[] // A user can have multiple products
  product_category product_category[]
  Zone             Zone[]
  admin            admin?

  @@unique([email, mobile, username]) // Unique constraint: the combination of email, mobile, and username must be unique
  @@index([id, email, mobile, username])
  @@map("user")
}

model admin {
  id        String      @id @default(cuid())
  role      String      @default("ADMIN")
  isActive  User_status @default(ACTIVE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String      @unique
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id, role, isActive])
  @@map("admin")
}

//supplier model 

model Supplier {
  id              String      @id @default(cuid())
  fullName        String
  address         String
  whatsapp        String
  profile_picture Json        @default("{}")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isActive        User_status @default(ACTIVE)
  User            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String      @unique
  role            String      @default("SUPPLIER")

  @@index([id, userId, isActive])
  @@map("supplier")
}

// Model for general user and retailer
model otherUsers {
  id              String      @id @default(cuid())
  User            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String      @unique
  firstName       String?
  lastName        String?
  profile_picture Json        @default("{}")
  role            Role        @default(GENERAL_USER)
  isActive        User_status @default(ACTIVE)
  userUniqueId    String?     @unique @default(cuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  order           Int         @default(0) // For sorting purpose
  userJoinDate    DateTime    @default(now())

  @@index([id, userId, role, isActive, userUniqueId])
  @@map("otherUsers")
}

// Model for operator, raider, representative
model worker {
  id                  String      @id @default(cuid())
  fullName            String?
  role                WorkerRole  @default(OPERATOR)
  fatherName          String?
  employeeID          String?     @unique @default(cuid())
  whatsapp            String?     @unique
  NID                 String?     @unique
  NIDImage            Json        @default("{}")
  education           String?     @default("")
  bankName            String?     @default("")
  branchName          String?     @default("")
  accountNumber       String?     @default("")
  mobileBanking       String?     @default("")
  mobileBankingNumber String?     @default("")
  profile_picture     Json        @default("{}")
  address             String?     @default("")
  zipCode             String?     @default("")
  userJoinDate        DateTime    @default(now())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  isActive            User_status @default(ACTIVE)
  order               Int         @default(0) // For sorting purpose
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String      @unique
  // Relations to Zone
  operatorZone        Zone?       @relation("ZoneOperator")
  representativeZones Zone[]      @relation("ZoneRepresentatives")
  riderZones          Zone[]      @relation("ZoneRiders")

  @@index([id, userId, role, isActive, NID, employeeID, whatsapp])
  @@map("workers")
}

// Get log-in info
enum loggin_status {
  SUCCESS
  FAILED
}

model loggin_history {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String?
  device    String?
  browser   String?
  os        String?
  location  String?
  status    loggin_status
  note      String?
  loginAt   DateTime      @default(now())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId, status]) // Indexing for faster search
  @@map("logginInfo") // Table name
}

// MASTER MODULES STARTS HERE
enum product_status {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

// Product category
model product_category {
  id                    String         @id @default(cuid())
  product_category_name String
  description           String?
  image                 Json           @default("{}")
  isActive              product_status @default(PENDING)
  order                 Int            @default(0) // For sorting purpose
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  vendor                Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade) // Link to vendor
  vendorId              String
  product               product[]
  createdBy             User           @relation(fields: [createdById], references: [id])
  createdById           String

  @@index([id, product_category_name, isActive])
  @@map("product_category")
}

enum product_quantity_type {
  UNIT
  PIECE
  KG
  GRAM
  PER
  DOZEN
  BOX
  CASE
  FEET
  LITER
  SET
}

enum delivery_charge_type {
  FIXED
  REGULAR
  FREE
  CHARGEABLE
}

model product {
  id                    String                @id @default(cuid())
  product_name          String
  description           String?
  product_code          String                @unique
  product_quantity_type product_quantity_type
  delivery_charge_type  delivery_charge_type
  isActive              product_status        @default(ACTIVE)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  vendor                Vendor                @relation(fields: [vendorId], references: [id], onDelete: Cascade) // Link to vendor
  vendorId              String
  product_category      product_category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId            String
  createdBy             User                  @relation(fields: [createdById], references: [id])
  createdById           String

  product_images product_image[] // A product can have multiple images

  @@index([id, product_name, isActive])
  @@map("product")
}

//product image model 
model product_image {
  id        String         @id @default(cuid())
  image     Json           @default("{}")
  isActive  product_status @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  product   product        @relation(fields: [productId], references: [id], onDelete: Cascade) // Link to product
  productId String

  @@index([id, isActive])
  @@map("product_image")
}

//location bd info model
// schema.prisma

model Division {
  id        Int        @id @default(autoincrement())
  name      String
  bn_name   String
  url       String
  districts District[] // 1-to-many relation with District
  Zone      Zone[]

  @@map("division")
}

model District {
  id          Int       @id @default(autoincrement())
  name        String
  bn_name     String
  lat         Float
  lon         Float
  url         String
  division_id Int
  division    Division  @relation(fields: [division_id], references: [id])
  upazilas    Upazila[] // 1-to-many relation with Upazila
  Zone        Zone[]

  @@map("district")
}

model Upazila {
  id          Int      @id @default(autoincrement())
  name        String
  bn_name     String
  url         String
  district_id Int
  district    District @relation(fields: [district_id], references: [id])
  unions      Union[] // 1-to-many relation with Union
  Zone        Zone[]

  @@map("upazila")
}

model Union {
  id         Int     @id @default(autoincrement())
  name       String
  bn_name    String
  url        String
  upazila_id Int
  upazila    Upazila @relation(fields: [upazila_id], references: [id])
  Zone       Zone[] // 1-to-many relation with Zone

  @@map("union")
}

enum Zone_status {
  ACTIVE
  INACTIVE
}

model Zone {
  id           String      @id @default(cuid())
  village_name String
  ward_no      String
  zone_name    String
  contact_no   String?
  whatsapp_no  String?
  isActive     Zone_status @default(ACTIVE)
  division_id  Int?
  division     Division?   @relation(fields: [division_id], references: [id]) // 1-to-1
  district_id  Int?
  district     District?   @relation(fields: [district_id], references: [id])
  upazila_id   Int?
  upazila      Upazila?    @relation(fields: [upazila_id], references: [id])
  union_id     Int?
  union        Union?      @relation(fields: [union_id], references: [id]) // 1-to-1 or 1-to-many

  // Foreign key for Operator (one-to-one relationship)
  operatorId String? @unique
  operator   worker? @relation("ZoneOperator", fields: [operatorId], references: [id])

  // Many-to-many relationships for Representatives and Riders
  representatives worker[] @relation("ZoneRepresentatives")
  riders          worker[] @relation("ZoneRiders")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
  vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade) // Link to vendor
  vendorId    String

  @@index([id, isActive, division_id, district_id, upazila_id, union_id, operatorId, vendorId])
  @@map("zone")
}
